//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input System/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""MobileActions"",
            ""id"": ""496d220d-a944-4f81-9cf7-da62538bff0b"",
            ""actions"": [
                {
                    ""name"": ""TouchContact"",
                    ""type"": ""Value"",
                    ""id"": ""65b3c76a-6dc9-4bda-ba69-7a56b668c2cf"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""110b9a52-1383-4f07-8cca-14d70204a9e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09aa1df9-493e-4cae-9ac5-c9c387aff453"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25931084-d1b2-4e49-9e35-909ced3f706e"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileActions
        m_MobileActions = asset.FindActionMap("MobileActions", throwIfNotFound: true);
        m_MobileActions_TouchContact = m_MobileActions.FindAction("TouchContact", throwIfNotFound: true);
        m_MobileActions_TouchPosition = m_MobileActions.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileActions
    private readonly InputActionMap m_MobileActions;
    private List<IMobileActionsActions> m_MobileActionsActionsCallbackInterfaces = new List<IMobileActionsActions>();
    private readonly InputAction m_MobileActions_TouchContact;
    private readonly InputAction m_MobileActions_TouchPosition;
    public struct MobileActionsActions
    {
        private @PlayerActions m_Wrapper;
        public MobileActionsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchContact => m_Wrapper.m_MobileActions_TouchContact;
        public InputAction @TouchPosition => m_Wrapper.m_MobileActions_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_MobileActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMobileActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Add(instance);
            @TouchContact.started += instance.OnTouchContact;
            @TouchContact.performed += instance.OnTouchContact;
            @TouchContact.canceled += instance.OnTouchContact;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(IMobileActionsActions instance)
        {
            @TouchContact.started -= instance.OnTouchContact;
            @TouchContact.performed -= instance.OnTouchContact;
            @TouchContact.canceled -= instance.OnTouchContact;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(IMobileActionsActions instance)
        {
            if (m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileActionsActions @MobileActions => new MobileActionsActions(this);
    public interface IMobileActionsActions
    {
        void OnTouchContact(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
